#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <map>
#include <set>
#include <algorithm>

using namespace std;

vector<string> a_to_a_ = {
        "(a)->(a)->(a)",
        "(a)->((a)->(a))->(a)",
        "((a)->(a)->(a))->((a)->((a)->(a))->(a))->((a)->(a))",
        "((a)->((a)->(a))->(a))->((a)->(a))",
        "(a)->(a)"
};

vector<string> a_or_nota_ = {
        "(a)->(a)|!(a)",
        "((((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a))->!((a)|!(a))->(((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a)))->((a)->((a)|!(a)))->((((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a))->!((a)|!(a))->(((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a)))",
        "((((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a))->!((a)|!(a))->(((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a)))",
        "((a)->((a)|!(a)))->((((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a))->!((a)|!(a))->(((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a)))",
        "((((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a)))->((a)->((a)|!(a)))->((((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a)))",
        "((((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a)))",
        "((a)->((a)|!(a)))->((((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a)))",
        "(((a)->((a)|!(a)))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a))))->(((a)->((a)|!(a)))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a)))))->(((a)->((a)|!(a)))->(!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a)))))",
        "((((a)->((a)|!(a)))->((((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a))))))->(((a)->((a)|!(a)))->(!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a))))))",
        "((a)->((a)|!(a)))->(!((a)|!(a))->(((a)->((a)|!(a)))->((a)->!((a)|!(a)))->!(a)))",
        "(((a)->((a)|!(a)))->!((a)|!(a))->((a)->((a)|!(a))))->((a)->((a)|!(a)))->(((a)->((a)|!(a)))->!((a)|!(a))->((a)->((a)|!(a))))",
        "(((a)->((a)|!(a)))->!((a)|!(a))->((a)->((a)|!(a))))",
        "((a)->((a)|!(a)))->(((a)->((a)|!(a)))->!((a)|!(a))->((a)->((a)|!(a))))",
        "((a)->((a)|!(a)))->((a)->((a)|!(a)))->((a)->((a)|!(a)))",
        "(((a)->((a)|!(a)))->((a)->((a)|!(a)))->((a)->((a)|!(a))))->(((a)->((a)|!(a)))->(((a)->((a)|!(a)))->((a)->((a)|!(a))))->((a)->((a)|!(a))))->(((a)->((a)|!(a)))->((a)->((a)|!(a))))",
        "(((a)->((a)|!(a)))->(((a)->((a)|!(a)))->((a)->((a)|!(a))))->((a)->((a)|!(a))))->(((a)->((a)|!(a)))->((a)->((a)|!(a))))",
        "((a)->((a)|!(a)))->(((a)->((a)|!(a)))->((a)->((a)|!(a))))->((a)->((a)|!(a)))",
        "((a)->((a)|!(a)))->((a)->((a)|!(a)))",
        "(((a)->((a)|!(a)))->((a)->((a)|!(a))))->(((a)->((a)|!(a)))->((a)->((a)|!(a)))->(!((a)|!(a))->((a)->((a)|!(a)))))->(((a)->((a)|!(a)))->(!((a)|!(a))->((a)->((a)|!(a)))))",
        "((((a)->((a)|!(a)))->(((a)->((a)|!(a)))->(!((a)|!(a))->((a)->((a)|!(a))))))->(((a)->((a)|!(a)))->(!((a)|!(a))->((a)->((a)|!(a))))))",
        "((a)->((a)|!(a)))->(!((a)|!(a))->((a)->((a)|!(a))))",
        "((!((a)|!(a))->((a)->((a)|!(a))))->(!((a)|!(a))->((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a))))->((a)->((a)|!(a)))->((!((a)|!(a))->((a)->((a)|!(a))))->(!((a)|!(a))->((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a))))",
        "((!((a)|!(a))->((a)->((a)|!(a))))->(!((a)|!(a))->((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a))))",
        "((a)->((a)|!(a)))->((!((a)|!(a))->((a)->((a)|!(a))))->(!((a)|!(a))->((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a))))",
        "(((a)->((a)|!(a)))->(!((a)|!(a))->((a)->((a)|!(a)))))->(((a)->((a)|!(a)))->(!((a)|!(a))->((a)->((a)|!(a))))->((!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a))))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))))->(((a)->((a)|!(a)))->((!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a))))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))))",
        "((((a)->((a)|!(a)))->((!((a)|!(a))->((a)->((a)|!(a))))->((!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a))))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a))))))->(((a)->((a)|!(a)))->((!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a))))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a))))))",
        "((a)->((a)|!(a)))->(((!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a))))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))))",
        "(((a)->((a)|!(a)))->(!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a)))))->(((a)->((a)|!(a)))->(!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a))))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a))))->(((a)->((a)|!(a)))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a))))",
        "((((a)->((a)|!(a)))->((!((a)|!(a))->(((a)->((a)|!(a)))->(((a)->!((a)|!(a)))->!(a))))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))))->(((a)->((a)|!(a)))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))))",
        "((a)->((a)|!(a)))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))",
        "((!((a)|!(a))->(a)->!((a)|!(a)))->!((a)|!(a))->(!((a)|!(a))->(a)->!((a)|!(a))))->((a)->((a)|!(a)))->((!((a)|!(a))->(a)->!((a)|!(a)))->!((a)|!(a))->(!((a)|!(a))->(a)->!((a)|!(a))))",
        "((!((a)|!(a))->(a)->!((a)|!(a)))->!((a)|!(a))->(!((a)|!(a))->(a)->!((a)|!(a))))",
        "((a)->((a)|!(a)))->((!((a)|!(a))->(a)->!((a)|!(a)))->!((a)|!(a))->(!((a)|!(a))->(a)->!((a)|!(a))))",
        "((!((a)|!(a))->(a)->!((a)|!(a))))->((a)->((a)|!(a)))->((!((a)|!(a))->(a)->!((a)|!(a))))",
        "((!((a)|!(a))->(a)->!((a)|!(a))))",
        "((a)->((a)|!(a)))->((!((a)|!(a))->(a)->!((a)|!(a))))",
        "(((a)->((a)|!(a)))->(!((a)|!(a))->((a)->!((a)|!(a)))))->(((a)->((a)|!(a)))->(!((a)|!(a))->((a)->!((a)|!(a))))->(!((a)|!(a))->(!((a)|!(a))->((a)->!((a)|!(a))))))->(((a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->((a)->!((a)|!(a))))))",
        "((((a)->((a)|!(a)))->((!((a)|!(a))->((a)->!((a)|!(a))))->(!((a)|!(a))->(!((a)|!(a))->((a)->!((a)|!(a)))))))->(((a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->((a)->!((a)|!(a)))))))",
        "((a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->(a)->!((a)|!(a))))",
        "(!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))->((a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))",
        "(!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))",
        "((a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))",
        "((!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))->((a)->((a)|!(a)))->((!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))",
        "((!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))",
        "((a)->((a)|!(a)))->((!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))",
        "(((a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))))->(((a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a))))->((!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a)))))->(((a)->((a)|!(a)))->((!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a)))))",
        "((((a)->((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->!((a)|!(a))))->((!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a))))))->(((a)->((a)|!(a)))->((!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a))))))",
        "((a)->((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))",
        "(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->((a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))",
        "(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))",
        "((a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))",
        "(((a)->((a)|!(a)))->(!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))))->(((a)->((a)|!(a)))->(!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a))))->(((a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))",
        "((((a)->((a)|!(a)))->((!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a)))))->(((a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a)))))",
        "((a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a)))",
        "((!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->((a)->!((a)|!(a))))->(!((a)|!(a))->((a)->!((a)|!(a)))))->((a)->((a)|!(a)))->((!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->((a)->!((a)|!(a))))->(!((a)|!(a))->((a)->!((a)|!(a)))))",
        "((!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->((a)->!((a)|!(a))))->(!((a)|!(a))->((a)->!((a)|!(a)))))",
        "((a)->((a)|!(a)))->((!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->((a)->!((a)|!(a))))->(!((a)|!(a))->((a)->!((a)|!(a)))))",
        "(((a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))->(((a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->((a)->!((a)|!(a)))))->(!((a)|!(a))->((a)->!((a)|!(a))))))->(((a)->((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->((a)->!((a)|!(a)))))->(!((a)|!(a))->((a)->!((a)|!(a))))))",
        "((((a)->((a)|!(a)))->((!((a)|!(a))->!((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->((a)->!((a)|!(a)))))->(!((a)|!(a))->((a)->!((a)|!(a)))))))->(((a)->((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->((a)->!((a)|!(a)))))->(!((a)|!(a))->((a)->!((a)|!(a)))))))",
        "((a)->((a)|!(a)))->(((!((a)|!(a))->(!((a)|!(a))->((a)->!((a)|!(a)))))->(!((a)|!(a))->((a)->!((a)|!(a))))))",
        "(!((a)|!(a))->((a)->!((a)|!(a))))->((a)->((a)|!(a)))->(!((a)|!(a))->((a)->!((a)|!(a))))",
        "(!((a)|!(a))->((a)->!((a)|!(a))))",
        "((a)->((a)|!(a)))->(!((a)|!(a))->((a)->!((a)|!(a))))",
        "((!((a)|!(a))->((a)->!((a)|!(a))))->(!((a)|!(a))->((a)->!((a)|!(a)))->!(a))->(!((a)|!(a))->!(a)))->((a)->((a)|!(a)))->((!((a)|!(a))->((a)->!((a)|!(a))))->(!((a)|!(a))->((a)->!((a)|!(a)))->!(a))->(!((a)|!(a))->!(a)))",
        "((!((a)|!(a))->((a)->!((a)|!(a))))->(!((a)|!(a))->((a)->!((a)|!(a)))->!(a))->(!((a)|!(a))->!(a)))",
        "((a)->((a)|!(a)))->((!((a)|!(a))->((a)->!((a)|!(a))))->(!((a)|!(a))->((a)->!((a)|!(a)))->!(a))->(!((a)|!(a))->!(a)))",
        "(((a)->((a)|!(a)))->(!((a)|!(a))->((a)->!((a)|!(a)))))->(((a)->((a)|!(a)))->(!((a)|!(a))->((a)->!((a)|!(a))))->((!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->!(a))))->(((a)->((a)|!(a)))->((!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->!(a))))",
        "((((a)->((a)|!(a)))->((!((a)|!(a))->((a)->!((a)|!(a))))->((!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->!(a)))))->(((a)->((a)|!(a)))->((!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->!(a)))))",
        "((a)->((a)|!(a)))->(((!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->!(a))))",
        "(((a)->((a)|!(a)))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a))))->(((a)->((a)|!(a)))->(!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->!(a)))->(((a)->((a)|!(a)))->(!((a)|!(a))->!(a)))",
        "((((a)->((a)|!(a)))->((!((a)|!(a))->(((a)->!((a)|!(a)))->!(a)))->(!((a)|!(a))->!(a))))->(((a)->((a)|!(a)))->(!((a)|!(a))->!(a))))",
        "((a)->((a)|!(a)))->(!((a)|!(a))->(!(a)))",
        "!((a)|!(a))->!(a)",
        "!(a)->(a)|!(a)",
        "(((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a))->!((a)|!(a))->((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a)))->(!(a)->((a)|!(a)))->(((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a))->!((a)|!(a))->((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a)))",
        "(((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a))->!((a)|!(a))->((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a)))",
        "(!(a)->((a)|!(a)))->(((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a))->!((a)|!(a))->((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a)))",
        "(((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a)))->(!(a)->((a)|!(a)))->(((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a)))",
        "(((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a)))",
        "(!(a)->((a)|!(a)))->(((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a)))",
        "((!(a)->((a)|!(a)))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a))))->((!(a)->((a)|!(a)))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a)))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a)))))",
        "(((!(a)->((a)|!(a)))->(((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a))))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a))))))",
        "(!(a)->((a)|!(a)))->(!((a)|!(a))->((!(a)->((a)|!(a)))->(!(a)->!((a)|!(a)))->!!(a)))",
        "((!(a)->((a)|!(a)))->!((a)|!(a))->(!(a)->((a)|!(a))))->(!(a)->((a)|!(a)))->((!(a)->((a)|!(a)))->!((a)|!(a))->(!(a)->((a)|!(a))))",
        "((!(a)->((a)|!(a)))->!((a)|!(a))->(!(a)->((a)|!(a))))",
        "(!(a)->((a)|!(a)))->((!(a)->((a)|!(a)))->!((a)|!(a))->(!(a)->((a)|!(a))))",
        "(!(a)->((a)|!(a)))->(!(a)->((a)|!(a)))->(!(a)->((a)|!(a)))",
        "((!(a)->((a)|!(a)))->(!(a)->((a)|!(a)))->(!(a)->((a)|!(a))))->((!(a)->((a)|!(a)))->((!(a)->((a)|!(a)))->(!(a)->((a)|!(a))))->(!(a)->((a)|!(a))))->((!(a)->((a)|!(a)))->(!(a)->((a)|!(a))))",
        "((!(a)->((a)|!(a)))->((!(a)->((a)|!(a)))->(!(a)->((a)|!(a))))->(!(a)->((a)|!(a))))->((!(a)->((a)|!(a)))->(!(a)->((a)|!(a))))",
        "(!(a)->((a)|!(a)))->((!(a)->((a)|!(a)))->(!(a)->((a)|!(a))))->(!(a)->((a)|!(a)))",
        "(!(a)->((a)|!(a)))->(!(a)->((a)|!(a)))",
        "((!(a)->((a)|!(a)))->(!(a)->((a)|!(a))))->((!(a)->((a)|!(a)))->(!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->((a)|!(a)))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->((a)|!(a)))))",
        "(((!(a)->((a)|!(a)))->((!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->((a)|!(a))))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->((a)|!(a))))))",
        "(!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->((a)|!(a))))",
        "((!((a)|!(a))->(!(a)->((a)|!(a))))->(!((a)|!(a))->(!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a))))->(!(a)->((a)|!(a)))->((!((a)|!(a))->(!(a)->((a)|!(a))))->(!((a)|!(a))->(!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a))))",
        "((!((a)|!(a))->(!(a)->((a)|!(a))))->(!((a)|!(a))->(!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a))))",
        "(!(a)->((a)|!(a)))->((!((a)|!(a))->(!(a)->((a)|!(a))))->(!((a)|!(a))->(!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a))))",
        "((!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->((a)|!(a)))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->((a)|!(a))))->((!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a))))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))))->((!(a)->((a)|!(a)))->((!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a))))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))))",
        "(((!(a)->((a)|!(a)))->((!((a)|!(a))->(!(a)->((a)|!(a))))->((!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a))))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a))))))->((!(a)->((a)|!(a)))->((!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a))))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a))))))",
        "(!(a)->((a)|!(a)))->(((!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a))))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))))",
        "((!(a)->((a)|!(a)))->(!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a)))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a))))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a))))",
        "(((!(a)->((a)|!(a)))->((!((a)|!(a))->((!(a)->((a)|!(a)))->((!(a)->!((a)|!(a)))->!!(a))))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))))",
        "(!(a)->((a)|!(a)))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))",
        "((!((a)|!(a))->!(a)->!((a)|!(a)))->!((a)|!(a))->(!((a)|!(a))->!(a)->!((a)|!(a))))->(!(a)->((a)|!(a)))->((!((a)|!(a))->!(a)->!((a)|!(a)))->!((a)|!(a))->(!((a)|!(a))->!(a)->!((a)|!(a))))",
        "((!((a)|!(a))->!(a)->!((a)|!(a)))->!((a)|!(a))->(!((a)|!(a))->!(a)->!((a)|!(a))))",
        "(!(a)->((a)|!(a)))->((!((a)|!(a))->!(a)->!((a)|!(a)))->!((a)|!(a))->(!((a)|!(a))->!(a)->!((a)|!(a))))",
        "((!((a)|!(a))->!(a)->!((a)|!(a))))->(!(a)->((a)|!(a)))->((!((a)|!(a))->!(a)->!((a)|!(a))))",
        "((!((a)|!(a))->!(a)->!((a)|!(a))))",
        "(!(a)->((a)|!(a)))->((!((a)|!(a))->!(a)->!((a)|!(a))))",
        "((!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->!((a)|!(a))))->(!((a)|!(a))->(!((a)|!(a))->(!(a)->!((a)|!(a))))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->(!(a)->!((a)|!(a))))))",
        "(((!(a)->((a)|!(a)))->((!((a)|!(a))->(!(a)->!((a)|!(a))))->(!((a)|!(a))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))))",
        "(!(a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!(a)->!((a)|!(a))))",
        "(!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))->(!(a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))",
        "(!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))",
        "(!(a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))",
        "((!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))->(!(a)->((a)|!(a)))->((!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))",
        "((!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))",
        "(!(a)->((a)|!(a)))->((!((a)|!(a))->!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))",
        "((!(a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a))))->((!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a)))))->((!(a)->((a)|!(a)))->((!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a)))))",
        "(((!(a)->((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->!((a)|!(a))))->((!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a))))))->((!(a)->((a)|!(a)))->((!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a))))))",
        "(!(a)->((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))",
        "(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))->(!(a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))",
        "(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))",
        "(!(a)->((a)|!(a)))->(!((a)|!(a))->(!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))",
        "((!(a)->((a)|!(a)))->(!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a)))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))",
        "(((!(a)->((a)|!(a)))->((!((a)|!(a))->((!((a)|!(a))->!((a)|!(a)))->!((a)|!(a))))->(!((a)|!(a))->!((a)|!(a)))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a)))))",
        "(!(a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a)))",
        "((!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->(!(a)->!((a)|!(a))))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))->(!(a)->((a)|!(a)))->((!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->(!(a)->!((a)|!(a))))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))",
        "((!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->(!(a)->!((a)|!(a))))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))",
        "(!(a)->((a)|!(a)))->((!((a)|!(a))->!((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))->(!(a)->!((a)|!(a))))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))",
        "((!(a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->!((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))->(!((a)|!(a))->(!(a)->!((a)|!(a))))))->((!(a)->((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))->(!((a)|!(a))->(!(a)->!((a)|!(a))))))",
        "(((!(a)->((a)|!(a)))->((!((a)|!(a))->!((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))))->((!(a)->((a)|!(a)))->((!((a)|!(a))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))))",
        "(!(a)->((a)|!(a)))->(((!((a)|!(a))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))->(!((a)|!(a))->(!(a)->!((a)|!(a))))))",
        "(!((a)|!(a))->(!(a)->!((a)|!(a))))->(!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->!((a)|!(a))))",
        "(!((a)|!(a))->(!(a)->!((a)|!(a))))",
        "(!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->!((a)|!(a))))",
        "((!((a)|!(a))->(!(a)->!((a)|!(a))))->(!((a)|!(a))->(!(a)->!((a)|!(a)))->!!(a))->(!((a)|!(a))->!!(a)))->(!(a)->((a)|!(a)))->((!((a)|!(a))->(!(a)->!((a)|!(a))))->(!((a)|!(a))->(!(a)->!((a)|!(a)))->!!(a))->(!((a)|!(a))->!!(a)))",
        "((!((a)|!(a))->(!(a)->!((a)|!(a))))->(!((a)|!(a))->(!(a)->!((a)|!(a)))->!!(a))->(!((a)|!(a))->!!(a)))",
        "(!(a)->((a)|!(a)))->((!((a)|!(a))->(!(a)->!((a)|!(a))))->(!((a)|!(a))->(!(a)->!((a)|!(a)))->!!(a))->(!((a)|!(a))->!!(a)))",
        "((!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->!((a)|!(a)))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->(!(a)->!((a)|!(a))))->((!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->!!(a))))->((!(a)->((a)|!(a)))->((!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->!!(a))))",
        "(((!(a)->((a)|!(a)))->((!((a)|!(a))->(!(a)->!((a)|!(a))))->((!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->!!(a)))))->((!(a)->((a)|!(a)))->((!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->!!(a)))))",
        "(!(a)->((a)|!(a)))->(((!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->!!(a))))",
        "((!(a)->((a)|!(a)))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->!!(a)))->((!(a)->((a)|!(a)))->(!((a)|!(a))->!!(a)))",
        "(((!(a)->((a)|!(a)))->((!((a)|!(a))->((!(a)->!((a)|!(a)))->!!(a)))->(!((a)|!(a))->!!(a))))->((!(a)->((a)|!(a)))->(!((a)|!(a))->!!(a))))",
        "(!(a)->((a)|!(a)))->(!((a)|!(a))->(!!(a)))",
        "!((a)|!(a))->!!(a)",
        "!((a)|!(a))->!(a)",
        "!((a)|!(a))->!!(a)",
        "(!((a)|!(a))->!(a))->(!((a)|!(a))->!!(a))->!!((a)|!(a))",
        "(!((a)|!(a))->!!(a))->!!((a)|!(a))",
        "!!((a)|!(a))",
        "!!((a)|!(a))->((a)|!(a))",
        "(a)|!(a)"
};

vector<string> nota_to_nota_ = {
        "!(a)"
};

vector<string> a_to_nota_ = {
        "(a)",
        "(!(a)->(a))->(!(a)->!(a))->!!(a)",
        "(a)->!(a)->(a)",
        "!(a)->(a)",
        "(!(a)->!(a))->!!(a)",
        "!(a)->!(a)->!(a)",
        "!(a)->(!(a)->!(a))->!(a)",
        "(!(a)->!(a)->!(a))->(!(a)->(!(a)->!(a))->!(a))->(!(a)->!(a))",
        "(!(a)->(!(a)->!(a))->!(a))->(!(a)->!(a))",
        "!(a)->!(a)",
        "!!(a)"
};

vector<string> a_to_b_ = {
        "b",
        "b->(a)->b",
        "(a)->b"
};

vector<string> a_to_notb_ = {
        "(((a)->b)->b)->(((a)->b)->!b)->!((a)->b)",
        "(((a)->b)->(a))->(((a)->b)->((a)->b))->(((a)->b)->b)",
        "(a)",
        "(a)->((a)->b)->(a)",
        "((a)->b)->(a)",
        "(((a)->b)->((a)->b))->(((a)->b)->b)",
        "(((a)->b)->((a)->b)->((a)->b))",
        "(((a)->b)->((a)->b)->((a)->b))->(((a)->b)->(((a)->b)->((a)->b))->((a)->b))->(((a)->b)->((a)->b))",
        "(((a)->b)->(((a)->b)->((a)->b))->((a)->b))->(((a)->b)->((a)->b))",
        "(((a)->b)->(((a)->b)->((a)->b))->((a)->b))",
        "((a)->b)->((a)->b)",
        "((a)->b)->b",
        "!b->((a)->b)->!b",
        "!b->((a)->b)->!b",
        "!b",
        "((a)->b)->!b",
        "(((a)->b)->!b)->!((a)->b)",
        "!((a)->b)"
};

vector<string> nota_to_b_ = {
        "b",
        "b->(a)->b",
        "(a)->b"
};

vector<string> nota_to_notb_ = {
        "((a)->!((b))->(a))->(a)->((a)->!(b)->(a))",
        "((a)->!(b)->(a))",
        "(a)->((a)->!(b)->(a))",
        "(a)->(a)->(a)",
        "((a)->(a)->(a))->((a)->((a)->(a))->(a))->((a)->(a))",
        "((a)->((a)->(a))->(a))->((a)->(a))",
        "(a)->((a)->(a))->(a)",
        "(a)->(a)",
        "((a)->(a))->((a)->(a)->(!(b)->(a)))->((a)->(!(b)->(a)))",
        "((a)->(a)->!(b)->(a))->((a)->!(b)->(a))",
        "(a)->!(b)->(a)",
        "(!(a)->!(b)->!(a))->(a)->(!(a)->!(b)->!(a))",
        "!(a)->!(b)->!(a)",
        "(a)->!(a)->!(b)->!(a)",
        "!(a)->(a)->!(a)",
        "!(a)",
        "(a)->!(a)",
        "((a)->!(a))->((a)->!(a)->!(b)->!(a))->((a)->!(b)->!(a))",
        "((a)->!(a)->!(b)->!(a))->((a)->!(b)->!(a))",
        "(a)->!(b)->!(a)",
        "((!(b)->(a))->(!(b)->!(a))->!!(b))->(a)->((!(b)->(a))->(!(b)->!(a))->!!(b))",
        "(!(b)->(a))->(!(b)->!(a))->!!(b)",
        "(a)->((!(b)->(a))->(!(b)->!(a))->!!(b))",
        "((a)->(!(b)->(a)))->((a)->(!(b)->(a))->((!(b)->!(a))->!!(b)))->((a)->((!(b)->!(a))->!!(b)))",
        "(((a)->((!(b)->(a))->((!(b)->!(a))->!!(b))))->((a)->((!(b)->!(a))->!!(b))))",
        "(a)->((!(b)->!(a))->!!(b))",
        "((a)->(!(b)->!(a)))->((a)->(!(b)->!(a))->!!(b))->((a)->!!(b))",
        "(((a)->((!(b)->!(a))->!!(b)))->((a)->!!(b)))",
        "(a)->!!(b)",
        "(!!(b)->(b))->(a)->(!!(b)->(b))",
        "!!(b)->(b)",
        "(a)->!!(b)->(b)",
        "((a)->!!(b))->((a)->!!(b)->(b))->((a)->(b))",
        "(((a)->!!(b)->(b))->((a)->(b)))",
        "(a)->(b)"
};

vector<string> a_and_b_ = {
        "a",
        "b",
        "(a)->b->(a)&b",
        "b->(a)&b",
        "(a)&b"
};

vector<string> a_and_notb_ = {
        "(a)",
        "!b",
        "((a)&b->b)->((a)&b->!b)->!((a)&b)",
        "(a)&b->b",
        "!b->(a)&b->!b",
        "(a)&b->!b",
        "((a)&b->!b)->!((a)&b)",
        "!((a)&b)"
};

vector<string> nota_and_b_ = {
        "!(a)",
        "b",
        "((a)&b->(a))->((a)&b->!(a))->!((a)&b)",
        "(a)&b->(a)",
        "!(a)->(a)&b->!(a)",
        "(a)&b->!(a)",
        "((a)&b->!(a))->!((a)&b)",
        "!((a)&b)"
};

vector<string> nota_and_notb_ = {
        "!(a)",
        "!b",
        "((a)&b->b)->((a)&b->!b)->!((a)&b)",
        "(a)&b->b",
        "!b->(a)&b->!b",
        "(a)&b->!b",
        "((a)&b->!b)->!((a)&b)",
        "!((a)&b)"
};

vector<string> a_or_b_ = {
        "(a)",
        "(a)->(a)|(b)",
        "(a)|(b)"
};

vector<string> nota_or_b_ = {
        "(b)->(a)|(b)",
        "b",
        "(a)|(b)"
};

vector<string> a_or_notb_ = {
        "(a)->(a)|(b)",
        "a",
        "(a)|(b)"
};

vector<string> nota_or_notb_ = {
        "!(a)",
        "((a)|b->((a)))->((a)|b->!((a)))->!((a)|b)",
        "((a)->(a))->(b->(a))->((a)|b->(a))",
        "(a)->(a)->(a)",
        "((a)->(a)->(a))->((a)->((a)->(a))->(a))->((a)->(a))",
        "((a)->((a)->(a))->(a))->((a)->(a))",
        "(a)->((a)->(a))->(a)",
        "(a)->(a)",
        "(b->(a))->((a)|b->(a))",
        "(b->!(a)->b)->b->(b->!(a)->b)",
        "(b->!(a)->b)",
        "b->(b->!(a)->b)",
        "b->b->b",
        "(b->b->b)->(b->(b->b)->b)->(b->b)",
        "(b->(b->b)->b)->(b->b)",
        "b->(b->b)->b",
        "b->b",
        "(b->b)->(b->b->(!(a)->b))->(b->(!(a)->b))",
        "(b->b->!(a)->b)->(b->!(a)->b)",
        "b->!(a)->b",
        "(!b->!(a)->!b)->b->(!b->!(a)->!b)",
        "!b->!(a)->!b",
        "b->!b->!(a)->!b",
        "!b->b->!b",
        "!b",
        "b->!b",
        "(b->!b)->(b->!b->!(a)->!b)->(b->!(a)->!b)",
        "(b->!b->!(a)->!b)->(b->!(a)->!b)",
        "b->!(a)->!b",
        "((!(a)->b)->(!(a)->!b)->!!(a))->b->((!(a)->b)->(!(a)->!b)->!!(a))",
        "(!(a)->b)->(!(a)->!b)->!!(a)",
        "b->((!(a)->b)->(!(a)->!b)->!!(a))",
        "(b->(!(a)->b))->(b->(!(a)->b)->((!(a)->!b)->!!(a)))->(b->((!(a)->!b)->!!(a)))",
        "((b->((!(a)->b)->((!(a)->!b)->!!(a))))->(b->((!(a)->!b)->!!(a))))",
        "b->((!(a)->!b)->!!(a))",
        "(b->(!(a)->!b))->(b->(!(a)->!b)->!!(a))->(b->!!(a))",
        "((b->((!(a)->!b)->!!(a)))->(b->!!(a)))",
        "b->!!(a)",
        "(!!(a)->(a))->b->(!!(a)->(a))",
        "!!(a)->(a)",
        "b->!!(a)->(a)",
        "(b->!!(a))->(b->!!(a)->(a))->(b->(a))",
        "((b->!!(a)->(a))->(b->(a)))",
        "b->(a)",
        "(a)|b->(a)",
        "((a)|b->!(a))->!((a)|b)",
        "!(a)->(a)|b->!(a)",
        "(a)|b->!(a)",
        "!((a)|b)"
};

struct tree {
    string value = "";
    tree *left = nullptr;
    tree *right = nullptr;
};

map<string, int> pred;
map<string, tree *> *save;
vector<string> firstarg, firstargnotmod, gyp, guf;
set<string> words;
map<string, bool> useWords;
tree *treeExpress = new tree();
vector<vector<string> > myProof;
vector<string> gypoteza, dopMP, lastchanged;

string axiomy[10] = {
        "A->(B->A)",
        "(A->B)->(A->(B->C))->(A->C)",
        "A->B->(A&B)",
        "(A&B)->A",
        "(A&B)->B",
        "A->(A|B)",
        "B->(A|B)",
        "(A->C)->(B->C)->((A|B)->C)",
        "(A->B)->(A->!B)->!A",
        "!!A->A"
};

vector<string> leftargs, rightargs;

tree *modaxiomy[10];

string expression(string s);

void findParts(string s) {
    bool flag = false;
    for (int i = 0; i < s.length(); i++) {
        if (s[i] == '-') {
            int j = i + 2;
            int balance = 0;
            for (int k = j + 1; k < s.length(); k++) {
                if (s[k] == '(')
                    balance++;
                if (s[k] == ')')
                    balance--;
                if (s[k] == ',' && balance == 0) {
                    leftargs.push_back(s.substr(j + 1, k - j - 1));
                    rightargs.push_back(s.substr(k + 1, s.length() - k - 2));
                    flag = true;
                    break;
                }
            }
            if (flag) break;
        }
    }
    if (!flag) {
        leftargs.push_back("");
        rightargs.push_back("");
    }
}

pair<int, int> checkmp(string s) {
    for (int i = rightargs.size() - 2; i >= 0; i--) {
        if (s == rightargs[i]) {
            for (int k = 0; k < firstarg.size() - 1; k++) {
                if (firstarg[k] == leftargs[i]) {
                    return make_pair(i + 1, k + 1);
                }
            }
        }
    }
    return make_pair(-1, -1);
}

string negativ(string s) {
    int balance = 0;
    for (int i = 0; i < s.length(); i++) {
        if (s[i] == '(')
            balance++;
        if (s[i] == ')')
            balance--;
        if (balance == 0 && s[i] == '!') {
            return "(!" + negativ(s.substr(i + 1, s.length() - i - 1)) + ")";
        }
    }
    if (s.length() > 0 && s[0] == '(') {
        return expression(s.substr(1, s.length() - 2));
    } else
        return s;
}

string kon(string s) {
    int balance = 0;
    for (int i = s.length() - 1; i >= 0; i--) {
        if (s[i] == '(')
            balance++;
        if (s[i] == ')')
            balance--;
        if (balance == 0 && s[i] == '&') {
            return "(&," + kon(s.substr(0, i)) + "," + negativ(s.substr(i + 1, s.length() - i)) + ")";
        }
    }
    return negativ(s);
}

string diz(string s) {
    int balance = 0;
    for (int i = s.length() - 1; i >= 0; i--) {
        if (s[i] == '(')
            balance++;
        if (s[i] == ')')
            balance--;
        if (balance == 0 && s[i] == '|') {
            return "(|," + diz(s.substr(0, i)) + "," + kon(s.substr(i + 1, s.length() - i - 1)) + ")";
        }
    }
    return kon(s);
}

string expression(string s) {
    int balance = 0;
    for (int i = 0; i < s.length(); i++) {
        if (s[i] == '(')
            balance++;
        if (s[i] == ')')
            balance--;
        if (balance == 0 && s[i] == '-') {
            return "(->," + diz(s.substr(0, i)) + "," + expression(s.substr(i + 2, s.length() - i - 2)) + ")";
        }
    }
    return diz(s);
}

void buildtree(string s, tree *node) {
    bool flag = false;
    for (int i = 0; i < s.length(); i++) {
        if (s[i] == '&' or s[i] == '|' or s[i] == '-') {
            node->value = s[i];
            int j = 0;
            if (s[i + 1] == '>') j = i + 2;
            else
                j = i + 1;
            int balance = 0;
            for (int k = j + 1; k < s.length(); k++) {
                if (s[k] == '(') balance++;
                if (s[k] == ')') balance--;
                if (s[k] == ',' && balance == 0) {
                    node->left = new tree();
                    node->right = new tree();
                    buildtree(s.substr(j + 1, k - j - 1), node->left);
                    buildtree(s.substr(k + 1, s.length() - k - 2), node->right);
                    flag = true;
                    break;
                }
            }
            if (flag) break;
        } else {
            if (s[i] == '!') {
                node->value = s[i];
                node->left = new tree();
                buildtree(s.substr(i + 1, s.length() - 2 - i), node->left);
                break;
            }
            bool flag2 = false;
            int j = i;
            while (j < s.length() && s[j] != '(' && s[j] != ')') {
                node->value += s[j];
                j++;
                flag2 = true;
            }
            if (flag2) break;
        }
    }
}

void writetree(tree *node) {
    cout << node->value << endl;
    if (node->left != nullptr) writetree(node->left);
    if (node->right != nullptr) writetree(node->right);
}

void getWords(tree *node) {
    if (node->value != "-" && node->value != "|" && node->value != "&" && node->value != "!") {
        if (words.count(node->value) == 0) {
            words.insert(node->value);
            useWords.insert(make_pair(node->value, false));
        }
    }
    if (node->left != nullptr) getWords(node->left);
    if (node->right != nullptr) getWords(node->right);
}

bool checkTres(tree *r1, tree *r2) {
    if (r1 == nullptr && r2 == nullptr) {
        return true;
    }
    if ((r1 == nullptr && r2 != nullptr) || (r1 != nullptr && r2 == nullptr)) {
        return false;
    }
    if (r1->value == r2->value) {
        return checkTres(r1->left, r2->left) & checkTres(r1->right, r2->right);
    } else {
        return false;
    }

}


bool chechaxi(tree *nodeaxi, tree *nodepotentialaxi) {
    if (nodeaxi->value == "A" | nodeaxi->value == "B" | nodeaxi->value == "C") {
        if (save->count(nodeaxi->value) > 0) {
            return checkTres(save->at(nodeaxi->value), nodepotentialaxi);
        } else {
            tree *tmp = new tree();
            tmp->value = nodepotentialaxi->value;
            tmp->right = nodepotentialaxi->right;
            tmp->left = nodepotentialaxi->left;
            save->insert(make_pair(nodeaxi->value, tmp));
            return true;
        }
    } else {
        if (nodeaxi->value.size() > 0 &&
            (nodeaxi->value[0] == '&' | nodeaxi->value[0] == '-' | nodeaxi->value[0] == '|') &&
            nodeaxi->value == nodepotentialaxi->value &&
            (nodeaxi->left != nullptr && nodeaxi->right != nullptr && nodepotentialaxi->left != nullptr &&
             nodepotentialaxi->right != nullptr)) {
            return chechaxi(nodeaxi->left, nodepotentialaxi->left) & chechaxi(nodeaxi->right, nodepotentialaxi->right);
        } else if (nodeaxi->value == nodepotentialaxi->value)
            return chechaxi(nodeaxi->left, nodepotentialaxi->left);
        else
            return false;
    }
}

bool isPredpl(string s) {
    for (int i = 0; i < guf.size(); i++) {
        if (s == guf[i]) return true;
    }
    return false;
}

vector<string> takegypotize(vector<string> gypotize, string predpl) {
    int indzap = 0;
    int indpalki = 0;
    int i = 0;
    gypotize.clear();
    for (int ch = 0; ch < predpl.length(); ch++) {
        if (predpl[ch] == ',') {
            indzap = ch;
        }
        if (predpl[ch] == '|' && predpl[ch + 1] == '=') {
            indpalki = ch;
            break;
        }
    }
    if (indpalki == 0  && indzap == 0) return gypotize;
    while (predpl[i] != '=') {
        string tmp = "";
        while (predpl[i] != ',' && predpl[i + 1] != '=') {
            tmp += predpl[i];
            i++;
        }
        gypotize.push_back(tmp);
        i++;
    }
    return gypotize;
}

string modExpression(string predpl) {
    string vivod = "";
    while (true) {
        int indzap = 0;
        int indpalki = 0;
        int i = 0;
        string tmpredpl = "";
        gyp.clear();
        if (vivod != "") {
            predpl = vivod;
            vivod = "";
        }
        for (int ch = 0; ch < predpl.length(); ch++) {
            if (predpl[ch] == ',') {
                indzap = ch;
            }
            if (predpl[ch] == '|' && predpl[ch + 1] == '=') {
                indpalki = ch;
                break;
            }
        }
        if (indpalki == 0 && indzap == 0) break;
        while (predpl[i] != '=') {
            string tmp = "";
            while (predpl[i] != ',' && predpl[i + 1] != '=') {
                tmp += predpl[i];
                i++;
            }
            gyp.push_back(tmp);
            i++;
        }
        tmpredpl = gyp[gyp.size() - 1];

        lastchanged.push_back(predpl.substr(indpalki + 2));
        for (int i = 0; i < indzap; i++) {
            vivod += predpl[i];
        }

        vivod += "|=(" + tmpredpl + ")->(";

        for (int i = indpalki + 2; i < predpl.length(); i++){
            vivod += predpl[i];
        }


        vivod += ")";
    }
    return predpl;
}


bool longRoad(tree *node) {
    if (node->value == "-") {
        return (!longRoad((node->left)) || longRoad(node->right));
    } else if (node->value == "&") {
        return (longRoad(node->left) && longRoad(node->right));
    } else if (node->value == "|") {
        return (longRoad(node->left) || longRoad(node->right));
    } else if (node->value == "!") {
        return !longRoad((node->left));
    } else return useWords.find(node->value)->second;
}

string checkExpression(tree *treeExpress) {
    for (int i = 0; i < 1 << useWords.size(); i++) {
        int tmp = i;
        for (auto j = useWords.begin(); j != useWords.end(); j++) {
            if (tmp % 2 == 0) {
                j->second = false;
            } else {
                j->second = true;
            }
            tmp = tmp / 2;
        }
        if (longRoad(treeExpress) == false) {
            string ans = "Высказывание ложно при ";
            for (auto j = useWords.begin(); j != useWords.end(); j++) {
                if (j->second == true) {
                    ans += j->first + "=И, ";
                } else {
                    ans += j->first + "=Л, ";
                }
            }
            ans = ans.substr(0, ans.length() - 2);
            return ans;
        }
    }
    return "ok";
}

void replaceallword(string word, vector<string> & proof) {
    for (int i = 0; i < proof.size(); i++) {
        for (int j = 0; j < proof[i].length(); j++) {
            if (proof[i][j] == 'a') {
                proof[i].replace(j, 1, word);
            }
        }
    }
}

vector<string> replaceallwords(string word1, string word2, vector<string> proof) {
    for (int i = 0; i < proof.size(); i++) {
        for (int j = 0; j < proof[i].length(); j++) {
            if (proof[i][j] == 'a') {
                proof[i].replace(j, 1, word1);
            } else if (proof[i][j] == 'b') {
                proof[i].replace(j, 1, word2);
            }
        }
    }
    return proof;
}

pair<string, bool> val;

pair<string, bool> longRoad2(tree *node, int ind) {
    if (node->value == "-") {
        pair<string, bool> left = longRoad2(node->left, ind);
        pair<string, bool> right = longRoad2(node->right, ind);
        if (!left.second && !right.second) {
            vector<string> tmp = nota_to_notb_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        if (!left.second && right.second) {
            vector<string> tmp = nota_to_b_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        if (left.second && !right.second) {
            vector<string> tmp = a_to_notb_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        if (left.second && right.second) {
            vector<string> tmp = a_to_b_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        val = make_pair('(' + left.first + "->" + right.first + ')',
                        (!left.second || right.second));
        return val;
    } else if (node->value == "&") {
        pair<string, bool> left = longRoad2(node->left, ind);
        pair<string, bool> right = longRoad2(node->right, ind);
        if (!left.second && !right.second) {
            vector<string> tmp = nota_and_notb_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        if (!left.second && right.second) {
            vector<string> tmp = nota_and_b_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        if (left.second && !right.second) {
            vector<string> tmp = a_and_notb_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        if (left.second && right.second) {
            vector<string> tmp = a_and_b_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        val = make_pair('(' + left.first + "&" + right.first + ')',
                        (left.second && right.second));
        return val;
    } else if (node->value == "|") {
        pair<string, bool> left = longRoad2(node->left, ind);
        pair<string, bool> right = longRoad2(node->right, ind);
        if (!left.second && !right.second) {
            vector<string> tmp = nota_or_notb_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        if (!left.second && right.second) {
            vector<string> tmp = nota_or_b_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        if (left.second && !right.second) {
            vector<string> tmp = a_or_notb_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        if (left.second && right.second) {
            vector<string> tmp = a_or_b_;
            tmp = replaceallwords(left.first, right.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        val = make_pair('(' + left.first + "|" + right.first + ')',
                        (left.second || right.second));
        return val;
    } else if (node->value == "!") {
        pair<string, bool> left = longRoad2(node->left, ind);
        if (left.second) {
            vector<string> tmp = a_to_nota_;
            replaceallword(left.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        else {
            vector<string> tmp = nota_to_nota_;
            replaceallword(left.first, tmp);
            myProof[ind].insert(myProof[ind].end(), tmp.begin(), tmp.end());
        }
        val = make_pair("!(" + left.first + ")", !left.second);
        return val;
    } else if (node->left == nullptr && node->right == nullptr) {
        val.first = '(' + node->value + ')';
        val.second = useWords.find(node->value)->second;
        return val;
    }
}

void buildproof(tree *treeExpress) {
    for (int i = 0; i < 1 << useWords.size(); i++) {
        int tmp = i;
        for (auto j = useWords.begin(); j != useWords.end(); j++) {
            if (tmp % 2 == 0) {
                j->second = false;
            } else {
                j->second = true;
            }
            tmp = tmp / 2;
        }
        val.first = "";
        longRoad2(treeExpress, i);
    }
}

bool isPredplinset(string s) {
    for (auto i = words.begin(); i != words.end(); i++) {
        if (useWords.count(*i) > 0) {
            if (useWords.find(*i)->second) {
                if (expression(*i) == s) return true;
            } else {
                if (expression("(!" + *i + ")") == s) return true;
            }
        }
    }
    return false;
}

bool isPredplinmap(string s) {
    for (auto i = useWords.begin(); i != useWords.end(); i++) {
        if (!i->second) {
            if ("(!" + expression(i->first) + ")" == s && isPredplinset(s)) return true;
        } else {
            if (expression(i->first) == s && isPredplinset(s)) return true;
        }
    }
    return false;
}

vector<string> deduction(string ss, string tmpredpl) {
    string s;
    s = "";
    for (int i = 0; i < ss.length(); i++) {
        if (ss[i] != ' ' && ss[i] != '\t' && ss[i] != '\r') {
            s += ss[i];
        }
    }

    firstargnotmod.push_back(s);
    string exps = expression(s);
    findParts(exps);
    firstarg.push_back(exps);

    if (exps == expression(tmpredpl)) {
        vector<string> dopproof = {
                "(" + s + ")" + "->(" + "(" + s + ")" + "->" + "(" + s + ")" + ")",
                "((" + s + ")" + "->(" + "(" + s + ")" + "->" + "(" + s + ")" + "))->(" + "(" + s + ")" + "->((" + "(" +
                s + ")" + "->" + "(" + s + ")" + ")->" + "(" + s + ")" + "))->(" + "(" + s + ")" + "->" + "(" + s +
                ")" + ")",
                "((" + s + ")" + "->((" + "(" + s + ")" + "->" + "(" + s + ")" + ")->" + "(" + s + ")" + "))->(" + "(" +
                s + ")" + "->" + "(" + s + ")" + ")",
                "((" + s + ")" + "->((" + "(" + s + ")" + "->" + "(" + s + ")" + ")->" + "(" + s + ")" + "))",
                "(" + s + ")" + "->" + "(" + s + ")"
        };

        return dopproof;
    }
    if (isPredplinmap(exps)) {
        vector<string> dopproof = {
                "(" + s + ")",
                "(" + s + ")" + "->(" + "(" + tmpredpl + ")" + "->" + "(" + s + ")" + ")",
                "(" + tmpredpl + ")" + "->" + "(" + s + ")"
        };
        return dopproof;
    }
    tree *node = new tree();
    buildtree(exps, node);
    for (int i = 0; i < 10; i++) {
        save = new map<string, tree *>;
        if (chechaxi(modaxiomy[i], node)) {
            vector<string> dopproof = {
                    "(" + s + ")",
                    "(" + s + ")" + "->(" + "(" + tmpredpl + ")" + "->" + "(" + s + ")" + ")",
                    "(" + tmpredpl + ")" + "->" + "(" + s + ")"
            };
            return dopproof;
        }
    }
    pair<int, int> checkpos = checkmp(exps);
    if (checkpos.first != -1) {
        int pos = checkpos.second - 1;
        vector<string> dopproof = {
                "((" + tmpredpl + ")" + "->" + "(" + firstargnotmod[pos] + ")" + ")->((" + "(" + tmpredpl + ")" +
                "->(" + "(" + firstargnotmod[pos] + ")" + "->" + "(" + s + ")" + "))->(" + "(" + tmpredpl + ")" + "->" +
                "(" + s + ")" + "))",
                "(((" + tmpredpl + ")" + "->(" + "(" + firstargnotmod[pos] + ")" + "->" + "(" + s + ")" + "))->(" +
                "(" + tmpredpl + ")" + "->" + "(" + s + ")" + "))",
                "(" + tmpredpl + ")" + "->" + "(" + s + ")"
        };
        return dopproof;
    }
}

vector<vector<string> > completedproof(vector<vector<string> > proofs, string express) {
    vector<vector<string> > comproof;
    comproof.clear();
    int help = 1 << (words.size() - 1);
    while (!words.empty()) {
        int i = 1 << (words.size() - 1);
        if (i != help) {
            proofs.clear();
            proofs = comproof;
        }
        string wordtmp;
        string word = *words.begin();
        words.erase(words.begin());
        comproof.clear();
        comproof.resize(i);
        for (int l = 0; l < i; l++) {
            for (int j = 2 * l; j < 2 * (l + 1); j++) {
                int tmpp = j;
                for (auto jj = useWords.begin(); jj != useWords.end(); jj++) {
                    if (tmpp % 2 == 0) {
                        jj->second = false;
                    } else {
                        jj->second = true;
                    }
                    tmpp = tmpp / 2;
                }
                if (!useWords.find(word)->second) {
                    wordtmp = "!(" + word + ")";
                } else {
                    wordtmp = word;
                }
                for (int k = 0; k < proofs[j].size(); k++) {
                    vector<string> tmp = deduction(proofs[j][k], wordtmp);
                    comproof[l].insert(comproof[l].end(), tmp.begin(), tmp.end());
                }
                firstargnotmod.clear();
                firstarg.clear();
                leftargs.clear();
                rightargs.clear();
            }
            vector<string> tmp = a_or_nota_;
            replaceallword(wordtmp, tmp);
            comproof[l].insert(comproof[l].end(), tmp.begin(), tmp.end());
            tmp.clear();
            tmp = {
                    "((" + wordtmp + ")->(" + express + "))->((!" + wordtmp + ")->(" + express + "))->(((" + wordtmp +
                    ")|(!" + wordtmp + "))->" + express + ")",
                    "((!" + wordtmp + ")->(" + express + "))->(((" + wordtmp + ")|(!" + wordtmp + "))->" + express +
                    ")",
                    "(((" + wordtmp + ")|(!" + wordtmp + "))->" + express + ")",
                    "(" + express + ")"
            };
            comproof[l].insert(comproof[l].end(), tmp.begin(), tmp.end());
        }
        useWords.erase(useWords.find(word));
    }
    return comproof;
}

int main() {
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    string express;
    getline(cin, express);
    string firstline = express;
    for (int i = 0; i < firstline.size(); i++) {
        if (firstline[i] == '=') firstline[i] = '-';
    }
    gypoteza = takegypotize(gypoteza, express);
    express = modExpression(express);
    express = express.substr(2, express.length() - 2);
    string modexpress = expression(express);
    buildtree(modexpress, treeExpress);
    getWords(treeExpress);
    myProof.resize(1 << useWords.size());
    string answer = checkExpression(treeExpress);
    if (answer != "ok") {
        cout << answer;
        return 0;
    }
    for (int i = 0; i < 10; i++) {
        modaxiomy[i] = new tree();
        buildtree(expression(axiomy[i]), modaxiomy[i]);
    }
    buildproof(treeExpress);
    vector<vector<string> > tmp;
    tmp = completedproof(myProof, express);
    myProof = tmp;
    myProof[0].insert(myProof[0].end(), gypoteza.begin(), gypoteza.end());
    reverse(lastchanged.begin(), lastchanged.end());
    myProof[0].insert(myProof[0].end(), lastchanged.begin(), lastchanged.end());
    cout << firstline << endl;
    for (int j = 0; j < myProof[0].size(); j++) {
        cout << myProof[0][j] << endl;
    }
    return 0;
}
